1 9   >> This lecture is about Natural Language of Content Analysis. As you see from this picture, this is really the first step
1 19  Text data are in natural languages. So computers have to understand natural languages to some extent, in order to make use of the data. So that's the topic of this lecture.
1 33  First, what is natural language processing, which is the main technique for processing natural language to obtain understanding. The second is the state of
1 46  natural language processing. Finally we're going to cover the relation between natural language processing and text retrieval. First, what is NLP?
1 62  is to think about if you see a text in a foreign language that you can understand. Now what do you have to do in order to understand that text?
1 73  computers are facing. So looking at the simple sentence like a dog is chasing a boy on the playground. We don't have any problems understanding this sentence.
1 85  have to do in order to understand it. Well in general, it would have to do the following. First, it would have to know dog is a noun, chasing's a verb, etc.
1 98  or part-of-speech tagging, and we need to figure out the syntactic categories of those words. So that's the first step. After that, we're going to figure
1 108  So for example, here it shows that A and the dog would go together to form a noun phrase. And we won't have dog and is to go first. And there are some structures
1 124  But this structure shows what we might get if we look at the sentence and try to interpret the sentence. Some words would go together first, and then they will go together
1 136  So here we show we have noun phrases as intermediate components, and then verbal phrases. Finally we have a sentence. And you get this structure.
1 149  a semantic analysis, or parsing. And we may have a parser accompanying the program, and that would automatically created this structure.
1 158  the structure of this sentence, but still you don't know the meaning of the sentence. So we have to go further to semantic analysis.
1 167  such a sentence to what we already know in our knowledge base. For example, you might imagine a dog that looks like that. There's a boy and
1 176  But for a computer would have to use symbols to denote that. We'd use a symbol (d1) to denote a dog. And (b)1 can denote a boy and then (p)1 can denote a playground.
1 195  activity that's happening here so we have a relationship chasing that connects all these symbols. So this is how a computer would obtain some understanding of this sentence.
1 211  also further infer some other things, and we might indeed naturally think of something else when we read a text and this is called inference. So for example, if you believe
1 222  this person might be scared, but with this rule, you can see computers could also infer that this boy maybe scared. So this is some extra knowledge
1 234  some understanding of the text. You can even go further to understand why the person say at this sentence. So this has to do as a use of language. This is called pragmatic analysis.
1 253  actor of a sentence, right? We say something to basically achieve some goal. There's some purpose there. And this has to do with
1 262  In this case the person who said this sentence might be reminding another person to bring back the dog. That could be one possible intent. To reach this level of
1 276  all of these steps and a computer would have to go through all these steps in order to completely understand this sentence. Yet we humans have no trouble
1 289  we instantly would get everything. There is a reason for that. That's because we have a large knowledge base in our brain and we can use common sense knowledge
1 301  Computers unfortunately are hard to obtain such understanding. They don't have such a knowledge base. They are still incapable of doing reasoning and uncertainties,
1 318  processing difficult for computers. But the fundamental reason why natural language processing is difficult for computers is simply because natural language has not been designed for
1 326  Natural languages are designed for us to communicate. There are other languages designed for computers. For example, programming languages.
1 338  So natural languages is designed to make our communication efficient. As a result, we omit a lot of common sense knowledge because we assume everyone
1 349  We also keep a lot of ambiguities because we assume the receiver or the hearer could know how to decipher an ambiguous word based on the knowledge or the context. There's no need to demand different
1 365  We could overload the same word with different meanings without the problem. Because of these reasons this makes every step in natural language of processing difficult for computers,
1 378  And common sense and reasoning is often required, that's also hard. So let me give you some examples of challenges here. Consider the word level ambiguity.
1 394  different syntactic categories. For example design can be a noun or a verb. The word of root may have multiple meanings.
1 406  the root of a plant. You might be able to think about it's meanings. There are also syntactical ambiguities. For example, the main topic of this
1 416  can actually be interpreted in two ways in terms of the structure. Think for a moment and see if you can figure that out. We usually think of this as
1 429  but you could also think of this as do say, language processing is natural. So this is an example of synaptic ambiguity. What we have different is
1 444  applied to the same sequence of words. Another common example of an ambiguous sentence is the following. A man saw a boy with a telescope. Now in this case the question is,
1 458  This is called a prepositional phrase attachment ambiguity or PP attachment ambiguity. Now we generally don't have a problem with these ambiguities because we have a lot of
1 475  us disambiguate the ambiguity. Another example of difficulty is anaphora resolution. So think about the sentence John persuaded Bill to buy a TV for himself.
1 487  himself refer to John or Bill? So again this is something that you have to use some background or the context to figure out. Finally, presupposition
1 495  Consider the sentence, he has quit smoking. Now this obviously implies that he smoked before. So imagine a computer wants to understand
1 507  It would have to use a lot of knowledge to figure that out. It also would have to maintain a large knowledge base of all the meanings of words and how they are connected to our
1 521  So this is why it's very difficult. So as a result, we are steep not perfect, in fact far from perfect in understanding natural language using computers. So this slide sort of gains a simplified
1 541  We can do part of speech tagging pretty well, so I showed 97% accuracy here. Now this number is obviously based on a certain dataset, so
1 555  This just shows that we can do it pretty well. But it's still not perfect. In terms of parsing, we can do partial parsing pretty well.
1 567  structures, or verb phrase structure, or some segment of the sentence, and this dude correct them in terms of the structure. And in some evaluation results,
1 579  accuracy in terms of partial parsing of sentences. Again, I have to say these numbers are relative to the dataset. In some other datasets,
1 590  Most of the existing work has been evaluated using news dataset. And so a lot of these numbers are more or less biased toward news data. Think about social media data,
1 605  In terms of a semantical analysis, we are far from being able to do a complete understanding of a sentence. But we have some techniques that would allow us to
1 618  So I could mention some of them. For example, we have techniques that can allow us to extract the entities and relations mentioned in text articles. For example,
1 634  locations, organizations, etc in text. So this is called entity extraction. We may be able to recognize the relations. For example, this person visited that place or
1 651  this company acquired another company. Such relations can be extracted by using the computer current Natural Language Processing techniques. They're not perfect but
1 660  Some entities are harder than others. We can also do word sense disintegration to some extend. We have to figure out whether this word in this sentence would have certain meaning
1 675  figure out, it has a different meaning. Again, it's not perfect, but you can do something in that direction. We can also do sentiment analysis, meaning, to figure out whether
1 685  This is especially useful for review analysis, for example. So these are examples of semantic analysis. And they help us to obtain partial
1 698  It's not giving us a complete understanding, as I showed it before, for this sentence. But it would still help us gain understanding of the content.
1 711  In terms of inference, we are not there yet, probably because of the general difficulty of inference and uncertainties. This is a general challenge
1 723  Now that's probably also because we don't have complete semantical representation for natural  text. So this is hard.
1 736  in limited domains when you have a lot of restrictions on the word uses, you may be able to perform inference to some extent. But in general we can not really do that reliably.
1 751  far from being done and we can only do that analysis for very special cases. So this roughly gives you some idea about the state of the art.
1 766  bit about what we can't do, and so we can't even do 100% part of speech tagging. Now this looks like a simple task, but think about the example here,
1 779  have different syntactic categories if you try to make a fine grained distinctions. It's not that easy to figure out such differences. It's also hard to do
1 792  And again, the same sentence that you saw before is example. This ambiguity can be very hard to disambiguate and you can imagine example where you have to use a lot of knowledge
1 807  from the background, in order to figure out who actually had the telescope. So although the sentence looks very simple, it actually is pretty hard. And in cases when the sentence is
1 822  five prepositional phrases, and there are even more possibilities to figure out. It's also harder to do precise deep semantic analysis. So here's an example.
1 840  How do we define owns exactly? The word own, it is something that we can understand but it's very hard to precisely describe the meaning of own for computers.
1 856  a general Natural Language Processing techniques that can process a lot of text data. In a shallow way, meaning we only do superficial analysis.
1 873  partial parsing or recognizing sentiment. And those are not deep understanding, because we're not really understanding the exact meaning of the sentence. On the other hand of the deep
1 885  up well, meaning that they would fill only some restricted text. And if you don't restrict the text domain or the use of words, then these
1 899  They may work well based on machine learning techniques on the data that are similar to the training data that the program has been trained on. But they generally wouldn't work well on
1 913  the training data. So this pretty much summarizes the state of the art of Natural Language Processing. Of course, within such a short amount of time we can't really give you
1 927  which is a big field. And I'd expect to see multiple courses on Natural Language Processing topic itself. But because of its relevance to the topic that we talk about, it's useful for
1 945  you happen to be exposed to that. So what does that mean for Text Retrieval? Well, in Text Retrieval we are dealing with all kinds of text. It's very hard to restrict
1 956  And we also are often dealing with a lot of text data. So that means The NLP techniques must be general, robust, and efficient. And that just implies today we can only
1 972  text retrieval. In fact, most search engines today use something called a bag of words representation. Now, this is probably the simplest
1 985  That is to turn text data into simply a bag of words. Meaning we'll keep individual words, but we'll ignore all the orders of words. And we'll keep duplicated
1 997  So this is called a bag of words representation. When you represent text in this way, you ignore a lot of valid information. That just makes it harder to understand
1 1011  because we've lost the order. But yet this representation tends to actually work pretty well for most search tasks. And this was partly because the search
1 1023  If you see matching of some of the query words in a text document, chances are that that document is about the topic, although there are exceptions. So in comparison of some other tasks, for
1 1040  you to understand the language accurately. Otherwise the translation would be wrong. So in comparison such tasks are all relatively easy. Such a representation is often sufficient
1 1050  the major search engines today, like a Google or Bing are using. Of course, I put in parentheses but not all, of course there are many queries that are not answered well by
1 1062  they do require the replantation that would go beyond bag of words replantation. That would require more natural language processing to be done. There was another reason why we
1 1076  NLP techniques in modern search engines. And that's because some retrieval techniques actually, naturally solved the problem of NLP. So one example is word
1 1089  Think about a word like Java. It could mean coffee or it could mean program language. If you look at the word anome, it would be ambiguous, but
1 1103  usually there are other words. For example, I'm looking for usage of Java applet. When I have applet there, that implies Java means program language.
1 1116  naturally prefer documents which Java is referring to program languages. Because those documents would probably match applet as well.
1 1128  documents where it means coffee then you would never match applet or with very small probability. So this is the case when some retrieval techniques
1 1141  Another example is some technique called feedback which we will talk about later in some of the lectures. This technique would allow us to add additional words to the query and
1 1161  be related to the query words. And these words can help matching documents where the original query words have not occurred. So this achieves, to some extent,
1 1172  So those techniques also helped us bypass some of the difficulties in natural language processing. However, in the long run we still need a deeper natural language processing
1 1187  accuracy of the current search engines. And it's particularly needed for complex search tasks. Or for question and answering. Google has recently launched a knowledge
1 1200  that goal, because knowledge graph would contain entities and their relations. And this goes beyond the simple bag of words replantation. And such technique should help us
1 1214  significantly, although this is the open topic for research and exploration. In sum, in this lecture we talked about what is NLP and we've talked about the state
1 1227  What we can do, what we cannot do. And finally, we also explain why the bag of words replantation remains the dominant replantation used in modern search engines,
1 1243  future search engines. If you want to know more, you can take a look at some additional readings. I only cited one here and that's a good starting point.
2 9   In this lecture, we're going to talk about the text access. In the previous lecture, we talked about the natural language content, analysis.
2 23  natural language processing techniques are still not good enough to process a lot of unrestricted text data in a robust manner. As a result,
2 39  applications like a search engine. In this lecture, we're going to talk about some high-level strategies to help users get access to the text data. This is also important step to convert
2 55  That are actually needed in a specific application. So the main question we'll address here, is how can a text information system, help users
2 67  We're going to cover two complimentary strategies, push versus pull. And then we're going to talk about two ways to implement the pull mode, querying versus browsing.
2 84  These are two different ways connect the users with the right information at the right time. The difference is which takes the initiative,
2 100  In the pull mode, the users take the initiative to start the information access process. And in this case, a user typically would use a search engine to fulfill the goal.
2 116  the user may type in the query and then browse the results to find the relevant information. So this is usually appropriate for satisfying a user's ad
2 130  An ad hoc information need is a temporary information need. For example, you want to buy a product so you suddenly have a need to read reviews about related product.
2 146  you have purchased in your product. You generally no longer need such information, so it's a temporary information need. In such a case, it's very hard for
2 155  it's more proper for the users to take the initiative, and that's why search engines are very useful. Today because many people have many information needs all the time.
2 172  processing many queries from this. And those are all, or mostly adequate. Information needs. So this is a pull mode. In contrast in the push mode in
2 183  to push the information to the user or to recommend information to the user. So in this case this is usually supported by a recommender system. Now this would be appropriate if.
2 197  For example you may have a research interest in some topic and that interest tends to stay for a while. So, it's rather stable. Your hobby is another example of.
2 214  the system can interact with you and can learn your interest, and then to monitor the information stream. If the system hasn't seen any relevant items to your interest,
2 227  to recommend the information to you. So, for example, a news filter or news recommended system could monitor the news stream and identify interesting news to you and
2 239  This mode of information access may be also a property that when this system has good knowledge about the users need and this happens in the search context. So for example, when you search for
2 251  a search engine might infer you might be also interested in something related. Formation. And they would recommend the information to you, so that just reminds you, for
2 267  placed on the search page. So this is about the two high level strategies or two modes of text access. Now let's look at the pull mode in more detail.
2 283  distinguish it two ways to help users. Querying versus browsing. In querying, a user would just enter a query. Typical the keyword query, and
2 294  return relevant documents to use. And this works well when the user knows what exactly are the keywords to be used. So if you know exactly what you are looking for,
2 304  And then query works very well, and we do that all of the time. But we also know that sometimes it doesn't work so well. When you don't know the right
2 316  you want to browse information in some topic area. You use because browsing would be more useful. So in this case, in the case of browsing,
2 329  into the relevant information by following the paths supported by the structures of documents. So the system would maintain some kind of structures and
2 347  these structures to navigate. So this really works well when the user wants to explore the information space or the user doesn't know what are the keywords to using the query.
2 365  inconvenient to type in a query. So even if a user knows what query to type in if the user is using a cellphone to search for information. It's still harder to enter the query.
2 378  browsing tends to be more convenient. The relationship between browsing and querying is best understood by making and imagine you're site seeing. Imagine if you're touring a city.
2 391  address of attraction. Taking a taxi there is perhaps the fastest way. You can go directly to the site. But if you don't know the exact address,
2 400  Or you can take a taxi to a nearby place and then walk around. It turns out that we do exactly the same in the information studies. If you know exactly what you
2 411  use the right keywords in your query to find the information you're after. That's usually the fastest way to do, find information. But what if you don't know
2 422  Well, you clearly probably won't so well. You will not related pages. And then, you need to also walk around in the information space, meaning by following the links or
2 434  You can then finally get into the relevant page. If you want to learn about again. You will likely do a lot of browsing so just like you are looking around in
2 449  interesting attractions related in the same. . So this analogy also tells us that today we have very good support for
2 470  good support for browsing. And this is because in order to browse effectively, we need a map to guide us, just like you need a map to.
2 478  through the city of Chicago, you need a topical map to tour the information space. So how to construct such a topical map is in fact a very interesting research question that might bring us
2 499  on the web or in applications. So, to summarize this lecture, we've talked about the two high level strategies for text access; push and pull. Push tends to be supported by
2 509  Pull tends to be supported by the Search Engine. Of course, in the sophisticated  information system, we should combine the two.
2 521   Querying and Browsing. Again we generally want to combine the two ways to help you assist, so that you can support the both querying nad browsing.
2 535  the relationship between pull and push, you can read this article. This give excellent discussion of the relationship between machine filtering and information retrieval.
3 7  to information recommendation or the push mode of information access. This lecture is about the text retrieval problem. This picture shows our overall plan for
3 16  In the last lecture, we talked about the high level strategies for text access. We talked about push versus pull. Such engines are the main tools for supporting the pull mode.
3 32  we're going to talk about the how search engines work in detail. So first it's about the text retrieval problem. We're going to talk about
3 46  First, we define Text Retrieval. Second we're going to make a comparison between Text Retrieval and the related task Database Retrieval. Finally, we're going to talk about
3 62  Document Ranking as two strategies for responding to a user's query. So what is Text Retrieval? It should be a task that's familiar for the most of us because we're using
3 79  So text retrieval is basically a task where the system would respond to a user's query With relevant documents. Basically, it's for supporting a query as one way to implement the poll
3 99  So the situation is the following. You have a collection of text retrieval documents. These documents could be all the webpages on the web, or
3 110  in the digital library. Or maybe all the text files in your computer. A user will typically give a query to the system to express information need.
3 129  relevant documents to users. Relevant documents refer to those documents that are useful to the user who typed in the query. All this task is a phone call
3 141  But literally information retrieval would broadly include the retrieval of other non-textual information as well, for example audio, video, etc. It's worth noting that
3 155  of information retrieval in the sense that other medias such as video can be retrieved by exploiting the companion text data. So for example,
3 172  match a user's query was the companion text data of the image. This problem is also called search problem. And the technology is often called
3 191  If you ever take a course in databases it will be useful to pause the lecture at this point and think about the differences between text retrieval and database retrieval.
3 209  are similar in many ways. But, there are some important differences. So, spend a moment to think about the differences between the two. Think about the data, and the information
3 223  those that are managed by a database system. Think about the different between the queries that you typically specify for database system versus queries that
3 239  And then finally think about the answers. What's the difference between the two? Okay, so if we think about the information or data managed by the two systems, we will see that in text retrieval.
3 258  But in databases, they are structured data where there is a clear defined schema to tell you this column is the names of people and that column is ages, etc. The unstructured text is not obvious
3 280  mentioned in the text. Because of this difference, we also see that text information tends to be more ambiguous and we talk about that in the processing chapter, whereas in databases.
3 298  where to find the semantics. The results important difference in the queries, and this is partly due to the difference in the information or data.
3 310  Whereas in their research, the queries are typically well-defined. Think about a SQL query that would clearly specify what records to be returned. So it has very well-defined semantics.
3 332  to be incomplete, also in that it doesn't really specify what documents should be retrieved. Whereas complete specification for
3 347  And because of these differences, the answers would be also different. Being the case of text retrieval, we're looking for it rather than the documents. In the database search,
3 362  match records with the sequel query more precisely. Now in the case of text retrieval, what should be the right answers to the query is not very well specified,
3 381  So it's unclear what should be the right answers to a query. And this has very important consequences, and that is, textual retrieval is
3 398  So this is a problem because if it's empirically defined, then we can not mathematically prove one method is better than another method. That also means we must rely
3 416  involving users to know which method works better. And that's why we have. You need more than one lectures to cover the issue of evaluation.
3 433  Sir Jennings. Without knowing how to evaluate heroism properly, there's no way to tell whether we have got the better or whether one system is better than another.
3 452  the problem in a formal way. So, this slide shows a formal formulation of the text retrieval problem. First, we have our vocabulary set, which is just a set of words in a language.
3 469  we are considering only one language, but in reality, on the web, there might be multiple natural languages. We have texts that are in all kinds of languages.
3 481  assume that is one kind of language. As the techniques used for retrieving data from multiple languages Are more or less similar to the techniques used for retrieving documents in one end, which
3 501  the principle methods are very similar. Next, we have the query, which is a sequence of words. And so here, you can see the query is defined as
3 516  Each q sub i is a word in the vocabulary. A document is defined in the same way, so it's also a sequence of words. And here, d sub ij is also a word in the vocabulary.
3 537  are much longer than queries. But there are also cases where the documents may be very short. So you can think about what might be a example of that case.
3 553  Tweets are very short. But in general, documents are longer than the queries. Now, then we have a collection of documents,
3 571  So think about the web. It could be very large. And then the goal of text retrieval is you'll find the set of relevant in the documents, which we denote by R'(q),
3 586  And this in general, a subset of all the documents in the collection. Unfortunately, this set of relevant documents is generally unknown, and user-dependent in the sense that,
3 603  in by different users, they expect the relevant documents may be different. The query given to us by the user is only a hint on which document should be in this set.
3 624  unable to specify what exactly should be in this set, especially in the case of web search, where the connection's so large, the user doesn't have complete knowledge about the whole production.
3 639  can do is to compute an approximation of this relevant document set. So we denote it by R'(q). So formerly,
3 654  R'(q) approximation of the relevant documents. So how can we do that? Now imagine if you are now asked to write a program to do this.
3 670  Now think for a moment. Right, so these are your input. The query, the documents. And then you are to compute the answers to this query,
3 689  would be useful to the user. So, how would you solve the problem? Now in general, there are two strategies that we can use. The first strategy is we do a document
3 702  going to have a binary classification function, or binary classifier. That's a function that would take a document and query as input, and then give a zero or
3 722  document is relevant to the query or not. So in this case, you can see the document. The relevant document is set, is defined as follows. It basically, all the documents that
3 745  So in this case, you can see the system must have decide if the document is relevant or not. Basically, it has to say whether it's one or zero.
3 756  Basically, it needs to know exactly whether it's going to be useful to the user. Alternatively, there's another strategy called document ranking.
3 767  the system is not going to make a call whether a document is random or not. But rather the system is going to use a real value function, f here. That would simply give us a value
3 785  document is more likely relevant. So it's not going to make a call whether this document is relevant or not. But rather it would say which document is more likely relevant.
3 797  used to random documents, and then we're going to let the user decide where to stop, when the user looks at the document. So we have a threshold theta
3 811  documents should be in this approximation set. And we're going to assume that all the documents that are ranked above the threshold
3 825  these are the documents that we deliver to the user. And theta is a cutoff determined by the user. So here we've got some collaboration
3 840  because we don't really make a cutoff. And the user kind of helped the system make a cutoff. So in this case, the system only needs to decide
3 854  likely relevant than another. And that is, it only needs to determine relative relevance, as opposed to absolute relevance. Now you can probably already sense that
3 871  determine than absolute relevance. Because in the first case, we have to say exactly whether a document is relevant or not. And it turns out that ranking is indeed
3 886  So let's look at these two strategies in more detail. So this picture shows how it works. So on the left side, we see these documents, and
3 902  the relevant documents. So we can see the true relevant documents here consists this set of true relevant documents, consists of these process, these documents.
3 920  we're going to basically classify them into two groups, relevant documents, and non-relevant ones. Of course, the classified will not be perfect so it will make mistakes.
3 939  of the relevant documents, we have got some number in the documents. And similarly, there is a relevant document that's misclassified as non-relevant.
3 953  we can see the system seems like, simply ranks all the documents in the descending order of the scores. And then, we're going to let the user stop wherever the user wants to stop.
3 967  examine more documents, then the user will scroll down some more and then stop . But if the user only wants to read a few random documents,
3 980  So in this case, the user stops at d4. So in fact, we have delivered these four documents to our user. So as I said ranking is generally preferred, and one of the reasons is
3 1006  document selection is unlikely accurate. Why? Because the only clue is usually the query. But the query may not be accurate in the
3 1017  For example, you might expect relevant documents to talk about all these topics by using specific vocabulary. And as a result, you might match no relevant documents.
3 1035  no others have discussed the topic using these vocabularies, right? So in this case, we'll see there is this problem of no relevant documents to return in
3 1053  On the other hand, if the query is under-constrained, for example, if the query does not have sufficient descriptive words to find the random documents.
3 1071  over delivery, and this when you thought these words my be sufficient to help you find the right documents. But, it turns out they are not sufficient and
3 1084  documents using similar words. And so, this is a case of over delivery. Unfortunately, it's very hard to find the right position between these two extremes. Why?
3 1099  the information in general the user does not have a good knowledge about the information to be found. And in that case, the user does not have a good knowledge about what
3 1113  those relevent documents. So it's very hard for a user to pre-specify the right level of constraints. Even if the classifier is accurate,
3 1129  relevant documents, because they are generally not equally relevant. Relevance is often a matter of degree. So we must prioritize these documents for a user to examine.
3 1152  prioritization is very important because a user cannot digest all the content the user generally would have to look at each document sequentially.
3 1169  users with the most relevant documents. And that's what ranking is doing. So for these reasons, ranking is generally preferred. Now this preference also has
3 1179  this is given by the probability ranking principle. In the end of this lecture, there is reference for this. This principle says, returning a ranked
3 1194  of probability that a document is relevant to the query is the optimal strategy under the following two assumptions. First, the utility of
3 1205  Is independent of the utility of any other document. Second, a user would be assumed to browse the results sequentially. Now it's easy to understand why these
3 1221  Site for the ranking strategy. Because if the documents are independent, then we can evaluate the utility of each document that's separate. And this would allow the computer
3 1240  And then, we are going to rank these documents based on the scrolls. The second assumption is to say that the user would indeed follow the rank list. If the user is not going to follow
3 1255  the documents sequentially, then obviously the ordering would not be optimal. So under these two assumptions, we can theoretically justify the ranking strategy is, in fact, the best that you could do.
3 1274  Do these two assumptions hold? I suggest you to pause the lecture, for a moment, to think about this. Now, can you think of some examples that would
3 1304  aren't necessarily true. Now, if you think for a moment, you may realize none of the assumptions Is actually true. For example, in the case of
3 1317  have documents that have similar or exactly the same content. If we look at each of them alone, each is relevant. But if the user has already seen
3 1332  generally not very useful for the user to see another similar or duplicated one. So clearly the utility on the document that is dependent on other documents
3 1347  In some other cases you might see a scenario where one document that may not be useful to the user, but when three particular documents are put together. They provide answers to
3 1362  So this is a collective relevance and that also suggests that the value of the document might depend on other documents. Sequential browsing generally would make
3 1379  But even if you have a rank list, there is evidence showing that users don't always just go strictly sequentially through the entire list. They sometimes will look at the bottom for
3 1394  And if you think about the more complicated interfaces that we could possibly use like two dimensional in the phase. Where you can put that additional
3 1406  sequential browsing is a very restricted assumption. So the point here is that none of these assumptions is really true but less than that.
3 1426  establishes some solid foundation for ranking as a primary pattern for search engines. And this has actually been the basis for a lot of research work in
3 1437  And many hours have been designed based on this assumption, despite that the assumptions aren't necessarily true. And we can address this problem
3 1451  Of a ranked list, for example, to remove redundancy. So to summarize this lecture, the main points that you can take away are the following.
3 1471  an empirically defined Problem. And that means which algorithm is better must be judged by the users. Second, document ranking is generally preferred.
3 1487  examination of search results. And this is also to bypass the difficulty in determining absolute relevance Because we can get some help from users in determining where to make the cut off,
3 1501  So, this further suggests that the main technical challenge in designing a search engine is the design effective ranking function. In other words, we need to define
3 1516  on the query and document pair. How we design such a function is the main topic in the following lectures. There are two suggested additional readings.
3 1537  the probability ranking principle. The second one is a must-read for anyone doing research on information retrieval. It's a classic IR book, which has excellent coverage of the main research
4 0  the time when the book was written. Chapter six of this book has an in-depth discussion of the Probability Ranking Principle and Probably for retrieval models in general.
4 7  This lecture is a overview of text retrieval methods. In the previous lecture, we introduced the problem of text retrieval. We explained that the main problem
4 24  to rank documents for a query. In this lecture, we will give an overview of different ways of designing this ranking function. So the problem is the following.
4 39  a sequence of words and the document that's also a sequence of words. And we hope to define a function f that can compute a score based
4 49  So the main challenge you hear is with design a good ranking function that can rank all the relevant documents on top of all the non-relevant ones. Clearly, this means our function
4 65  the likelihood that a document d is relevant to a query q. That also means we have to have some way to define relevance. In particular, in order to
4 79  we have to have a computational definition of relevance. And we achieve this goal by designing a retrieval model, which gives us
4 92  Now, over many decades, researchers have designed many different kinds of retrieval models. And they fall into different categories. First, one family of the models
4 110  Basically, we assume that if a document is more similar to the query than another document is, then we will say the first document is more relevant than the second one.
4 125  the ranking function is defined as the similarity between the query and the document. One well known example in this case is vector space model,
4 140  detail later in the lecture. A second kind of models are called probabilistic models. In this family of models, we follow a very different strategy, where we assume that
4 156  observations from random variables. And we assume there is a binary random variable called R here to indicate whether a document is relevant to a query.
4 173  respect to a query as a probability that this random variable R is equal to 1, given a particular document query. There are different cases of such a general idea.
4 188  another is language model, yet another is divergence from randomness model. In a later lecture, we will talk more about one case, which is language model.
4 201  on probabilistic inference. So here the idea is to associate uncertainty to inference rules, and we can then quantify the probability that we can
4 217  follows from the document. Finally, there is also a family of models that are using axiomatic thinking. Here, an idea is to define a set of constraints that we
4 235  So in this case, the problem is to seek a good ranking function that can satisfy all the desired constraints. Interestingly, although these different
4 252  in the end, the retrieval function tends to be very similar. And these functions tend to also involve similar variables. So now let's take a look at the common
4 268  and to examine some of the common ideas used in all these models. First, these models are all based on the assumption of using bag of words to represent text,
4 283  we explained this in the natural language processing lecture. Bag of words representation remains the main representation used in all the search engines.
4 297  the score of a query, like a presidential campaign news with respect to a document of d here, would be based on scores computed based on each individual word.
4 315  depend on the score of each word, such as presidential, campaign, and news. Here, we can see there are three different components, each corresponding to how well the
4 331  Inside of these functions, we see a number of heuristics used. So for example, one factor that affects the function d here is how many times does the word
4 348  This is called a term frequency, or TF. We might also denote as c of presidential and d. In general, if the word occurs more frequently in the document,
4 368  function would be larger. Another factor is, how long is the document? And this is to use the document length for scoring.
4 382  document many times, it's not as significant as if it occurred the same number of times in a short document. Because in a long document, any term
4 398  Finally, there is this factor called document frequency. That is, we also want to look at how often presidential occurs in the entire collection, and we call this document
4 415  And in some other models, we might also use a probability to characterize this information. So here, I show the probability of presidential in the collection.
4 434  the popularity of the term in the collection. In general, matching a rare term in the collection is contributing more to the overall score than
4 445  So this captures some of the main ideas used in pretty much older state of the art original models. So now, a natural question is, which model works the best?
4 465  models work equally well. So here are a list of the four major models that are generally regarded as a state of the art original models,
4 477  BM25, query likelihood, PL2. When optimized, these models tend to perform similarly. And this was discussed in detail in this reference at the end of this lecture.
4 493  BM25 is probably the most popular. It's most likely that this has been used in virtually all the search engines, and you will also often see this method discussed in research papers.
4 510  method later in some other lectures. So, to summarize, the main points made in this lecture are first the design of a good ranking function pre-requires a computational definition of relevance, and
4 527  appropriate retrieval model. Second, many models are equally effective, but we don't have a single winner yet. Researchers are still active and working on this problem,
4 540  optimal retrieval model. Finally, the state of the art ranking functions tend to rely on the following ideas. First, bag of words representation.
4 554  document frequency of words. Such information is used in the weighting function to determine the overall contribution of matching a word and document length.
4 569  ways, and we'll discuss how exactly they are combined to rank documents in the lectures later. There are two suggested additional readings if you have time.
4 585  find the detailed discussion and comparison of multiple state of the art models. The second is a book with a chapter that gives a broad
5 7   This lecture is about the vector space retrieval model. We're going to give an introduction to its basic idea.
5 23  the different ways of designing a retrieval model, which would give us a different arranging function. In this lecture, we're going to talk about a specific way of
5 37  a vector space retrieval model. And we're going to give a brief introduction to the basic idea. Vector space model is a special case of similarity based models
5 50  Which means we assume relevance is roughly similarity, between the document and the query. Now whether is this assumption is true is actually a question.
5 69  we have to convert the vague notion of relevance into a more precise definition that can be implemented with the program analogy. So in this process,
5 86  This is the first assumption that we make here. Basically, we assume that if a document is more similar to a query than another document.
5 102  will be more relevant than the second one. And this is the basis for ranking documents in this approach. Again, it's questionable whether this is really the best definition for randoms.
5 118  are other ways to model randoms. The basic idea of vectors for base retrieval model is actually very easy to understand. Imagine a high dimensional space where
5 131  So here I issue a three dimensional space with three words, programming, library and presidential. So each term here defines one dimension. Now we can consider vectors in this,
5 148  And we're going to assume that all our documents and the query will be placed in this vector space. So for example, on document might
5 163  Now this means this document probably covers library and presidential, but it doesn't really talk about programming. What does this mean in terms
5 180  That just means we're going to look at our document from the perspective of this vector. We're going to ignore everything else. Basically, what we see here is only
5 194  Of course, the document has all information. For example, the orders of words are  model and that's because we assume that
5 205  So with this presentation you can really see d1 simply suggests a  library. Now this is different from another document which might be recommended as
5 219  Now in this case, the document that covers programming and library, but it doesn't talk about presidential. So what does this remind you? Well you can probably guess the topic
5 234  the library is software lab library. So this shows that by using this vector space reproduction, we can actually capture the differences between topics of documents.
5 252  there are other vectors. For example, d3 is pointing into that direction, that might be a presidential program. And in fact we can place all
5 262  And they will be pointing to all kinds of directions. And similarly, we're going to place our query also in this space, as another vector.
5 277  similarity between the query vector and every document vector. So in this case for example, we can easily see d2 seems to be the closest to this query vector.
5 291  d2 will be rendered above others. So this is basically the main idea of the vector space model. So to be more precise, vector space model is a framework.
5 312  we make the following assumptions. First, we represent a document and query by a term vector. So here a term can be any basic concept. For example, a word or a phrase or
5 328  Those are just sequence of characters inside a word. Each term is assumed that will be defined by one dimension. Therefore n terms in our vocabulary,
5 344  A query vector would consist of a number of elements corresponding to the weights on different terms. Each document vector is also similar.
5 364  each value of each element is indicating the weight of the corresponding term. Here, you can see, we assume there are N dimensions.
5 375  each corresponding to the weight on the particular term. So the relevance in this case will be assumed to be the similarity between the two vectors.
5 393  is also defined as the similarity between the query vector and document vector. Now if I ask you to write a program to implement this approach
5 404  You would realize that this was far from clear. We haven't said a lot of things in detail, therefore it's impossible to actually write the program to implement this.
5 419  And this has to be refined in order to actually suggest a particular ranking function that you can implement on a computer. So what does this framework not say?
5 437  that would be required in order to implement this function. First, it did not say how we should define or select the basic concepts exactly. We clearly assume
5 456  Otherwise, there will be redundancy. For example, if two synonyms or somehow distinguish it as two different concepts. Then they would be defining two different dimensions and
5 474  Or all the emphasizing of matching this concept, because it would be as if you match the two dimensions when you actually matched
5 491  Secondly, it did not say how we exactly should place documents and the query in this space. Basically that show you some examples of query and document vectors.
5 509  a particular document point to? So this is equivalent to how to define the term weights? How do you compute the lose element values in those vectors?
5 521  because term weight in the query vector indicates the importance of term. So depending on how you assign the weight, you might prefer some terms to be matched over others.
5 539  the document is also very meaningful. It indicates how well the term characterizes the document. If you got it wrong then you clearly don't represent this document accurately.
5 555  measure is also not given. So these questions must be addressed before we can have a operational function that we can actually implement using a program language.
6 5  is the main topic of the next lecture. In this lecture we're going to talk about how to instantiate vector space model so that we can get very
6 22  So this is to continue the discussion of the vector space model, which is one particular approach to design a ranking function. And we're going to talk about how
6 38  the the vector space model as a guidance to instantiate the framework to derive a specific ranking function. And we're going to cover the symbolist
6 55  So as we discussed in the previous lecture, the vector space model is really a framework. And this didn't say.
6 71  vector space model is really a framework. It does not say many things. So, for example, here it shows that it did not say how we should define the dimension.
6 87  a document vector in this space. It did not say how we place a query vector in this vector space. And, finally, it did not say how we should measure the similarity between
6 100  So you can imagine, in order to implement this model, we have to say specifically how we compute these vectors. What is exactly xi?
6 118  This will determine where we place a document vector, where we place a query vector. And, of course, we also need to say exactly what
6 131  So if we can provide a definition of the concepts that would define the dimensions and these xi's or yi's and namely weights of terms for queries and document, then we will be
6 148  query vectors in this well defined space. And then, if we also specify similarity function, then we'll have a well defined ranking function.
6 167  think about the instantiation. Actually, I would suggest you to pause the lecture at this point, spend a couple minutes to think about. Suppose you are asked
6 179  You have come up with the idea of vector space model, but you still haven't figured out how to compute these vectors exactly, how to define the similarity function. What would you do?
6 200  and then proceed. So, let's think about some simplest ways of instantiating this vector space model. First, how do we define the dimension? Well, the obvious choice is to use
6 214  to define the dimension. And show that there are N words in our vocabulary. Therefore, there are N dimensions. Each word defines one dimension.
6 228  the bag of words with Now let's look at how we place vectors in this space. Again here, the simplest strategy is to use a Bit Vector to represent
6 244  And that means each element, xi and yi will be taking a value of either zero or 1. When it's 1, it means the corresponding word is
6 260  When it's 0, it's going to mean that it's absent. So you can imagine if the user types in a few words in the query, then the query vector will only
6 277  The document vector, generally we have more 1's, of course. But it will also have many zeros since the vocabulary is generally very large. Many words don't really
6 292  Many words will only occasionally occur in a document. A lot of words will be absent in a particular document. So now we have placed the documents and
6 311  Let's look at how we measure the similarity. So, a commonly used similarity measure here is Dot Product. The Dot Product of two
6 325  the sum of the products of the corresponding elements of the two vectors. So, here we see that it's the product of x1 and y1. So, here.
6 343  And then, finally, xn multiplied by yn. And then, we take a sum here. So that's a Dot Product. Now, we can represent this in a more general way using a sum here.
6 364  ways of measuring the similarity. So, now we see that we have defined the dimensions, we have defined the vectors, and we have also defined the similarity function.
6 381  vector space model, which is based on the bit vector  dot product similarity and bag of words . And the formula looks like this. So this is our formula.
6 397  function, a ranking function right? Now we can finally implement this function using a program language, and then rank the documents for query. Now, at this point you should
6 410  to think about how we can interpreted this score. So, we have gone through the process of modeling the retrieval problem using a vector space model.
6 425  we make assumptions about how we place vectors in the vector space, and how do we define the similarity. So in the end, we've got a specific retrieval function shown here.
6 438  whether this retrieval function actually makes sense, right? Can we expect this function to actually perform well when we used it to rank documents for
6 448  So it's worth thinking about what is this value that we are calculating. So, in the end, we'll get a number. But what does this number mean? Is it meaningful?
6 465  to sort of think about that. And, of course, the general question here is do you believe this is a good ranking function? Would it actually work well?
6 478  think about how to interpret this value. Is it actually meaningful? Does it mean something? This is related to how well the document matched the query.
6 491  whether this simplest vector space model actually works well, let's look at the example. So, here I show some sample documents and a sample query.
6 506  the presidential campaign. And we have five documents here. They cover different terms in the query. And if you look at these documents for a moment, you may realize that
6 528  some others are probably not relevant. Now, if I asked you to rank these documents, how would you rank them? This is basically our ideal ranking. When humans can examine the documents,
6 543  Now, so think for a moment, and take a look at this slide. And perhaps by pausing the lecture. So I think most of you would agree that d4 and d3 are probably
6 563  really cover the query well. They match news, presidential and campaign. So, it looks like these documents are probably better than the others.
6 577  And the other three d2, d1, and d5 are really not relevant. So we can also say d4 and d3 are relevant documents, and d1, d2 and d5 are non-relevant.
6 595  vector space model could do the same, or could do something closer. So, let's first think about how we actually use this model to score documents.
6 604  Here I show two documents, d1 and d3. And we have the query also here. In the vector space model, of course we want to first compute the vectors for these documents and the query.
6 618  So these are the end dimensions that we'll be thinking about. So what do you think is the vector for the query? Note that we're assuming
6 632  to indicate whether a term is absent or present in the query or in the document. So these are zero,1 bit vectors. So what do you think is the query vector? Well, the query has four words here.
6 654  there will be a 1. And for the rest, there will be zeros. Now, what about the documents? It's the same. So d1 has two rows, news and about.
6 667  and the rest are zeroes. Similarly, so now that we have the two vectors, let's compute the similarity. And we're going to use Do Product.
6 681  we just multiply the corresponding elements, right? So these two will be formal product, and these two will generate another product,
6 700  another product and so on, so forth. Now you can easily see if we do that, we actually don't have to care about these zeroes because whenever we have a zero the product will be zero.
6 717  over all these pairs, then the zero entries will be gone. As long as you have one zero, then the product would be zero. So, in the fact, we're just
6 734  In this case, we have seen two, so the result will be 2. So what does that mean? Well, that means this number, or the value of this scoring function,
6 753  query terms are matched in the document. Because if a term is matched in the document, then there will be two one's. If it's not, then there will be zero on the document side.
6 770  the term is not in the query, there will be a zero in the query vector. So those don't count. So, as a result, this scoring function basically
6 783  terms are matched in a document. This is how we interpret this score. Now, we can also take a look at d3. In this case, you can see the result is 3 because d3 matched to the three
6 803  campaign, whereas d1 only matched the two. Now in this case, this seems reasonable to rank d3 on top of d1. And this simplest vector space model indeed does that.
6 815  However, if we examine this model in detail, we likely will find some problems. So, here I'm going to show all the scores for these five documents. And you can easily verify they're
6 829  counting the number of unique query terms matched in each document. Now note that this measure actually makes sense, right? It basically means if a document
6 843  then the document will be assumed to be more relevant. And that seems to make sense. The only problem is here we can note that there are three documents, d2, d3 and d4.
6 865  So, that's a problem because if you look at them carefully, it seems that the d4 should be ranked above d3 because d3 only mentions the presidential once, but d4 mentioned it multiple times.
6 887  presidential could be an dimension. But d4 is clearly above the presidential campaign. Another problem is that d2 and d3 also have the same score.
6 901  that are matched, in the case of d2, it matched the news, about and campaign. But in the case of d3, it matched news, presidential and campaign. So intuitively this reads better
6 917  is more important than matching about, even though about and the presidential are both in the query. So intuitively, we would like d3 to be ranked above d2.
6 933  So that means this model is still not good enough. We have to solve these problems. To summarize, in this lecture we talked about how
6 947  We mainly need to do three things. One is to define the dimension. The second is to decide how to place documents as vectors in the vector space, and to also place a query in
6 967  And third is to define the similarity between two vectors, particularly the query vector and the document vector. We also talked about various simple way
6 982  Indeed, that's probably the simplest vector space model that we can derive. In this case, we use each word to define the dimension. We use a zero, 1 bit vector to
6 997  In this case, we basically only care about word presence or absence. We ignore the frequency. And we use the Dot Product as the similarity function.
6 1013  we showed that the scoring function is basically to score a document based on the number of distinct query words matched in the document. We also showed that such a simple vector
